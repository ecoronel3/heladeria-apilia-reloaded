# coding: utf-8

"""
    Heladería Via Apilia

    API de la Heladería Via Apilia. A través de esta API se pueden consultar los gustos de helado y realizar pedidos.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devs@heladeria-apilia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.datos_de_pago import DatosDePago  # noqa: F401,E501

class DatosDePagoTarjeta(DatosDePago):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'numeros_tarjeta': 'str',
        'vencimiento_tarjeta_mes': 'float',
        'vencimiento_tarjeta_anio': 'float'
    }
    if hasattr(DatosDePago, "swagger_types"):
        swagger_types.update(DatosDePago.swagger_types)

    attribute_map = {
        'numeros_tarjeta': 'numerosTarjeta',
        'vencimiento_tarjeta_mes': 'vencimientoTarjetaMes',
        'vencimiento_tarjeta_anio': 'vencimientoTarjetaAnio'
    }
    if hasattr(DatosDePago, "attribute_map"):
        attribute_map.update(DatosDePago.attribute_map)

    def __init__(self, numeros_tarjeta=None, vencimiento_tarjeta_mes=None, vencimiento_tarjeta_anio=None, *args, **kwargs):  # noqa: E501
        """DatosDePagoTarjeta - a model defined in Swagger"""  # noqa: E501
        self._numeros_tarjeta = None
        self._vencimiento_tarjeta_mes = None
        self._vencimiento_tarjeta_anio = None
        self.discriminator = None
        self.numeros_tarjeta = numeros_tarjeta
        self.vencimiento_tarjeta_mes = vencimiento_tarjeta_mes
        self.vencimiento_tarjeta_anio = vencimiento_tarjeta_anio
        DatosDePago.__init__(self, *args, **kwargs)

    @property
    def numeros_tarjeta(self):
        """Gets the numeros_tarjeta of this DatosDePagoTarjeta.  # noqa: E501

        los 15 o 16 números de la tarjeta de crédito  # noqa: E501

        :return: The numeros_tarjeta of this DatosDePagoTarjeta.  # noqa: E501
        :rtype: str
        """
        return self._numeros_tarjeta

    @numeros_tarjeta.setter
    def numeros_tarjeta(self, numeros_tarjeta):
        """Sets the numeros_tarjeta of this DatosDePagoTarjeta.

        los 15 o 16 números de la tarjeta de crédito  # noqa: E501

        :param numeros_tarjeta: The numeros_tarjeta of this DatosDePagoTarjeta.  # noqa: E501
        :type: str
        """
        if numeros_tarjeta is None:
            raise ValueError("Invalid value for `numeros_tarjeta`, must not be `None`")  # noqa: E501

        self._numeros_tarjeta = numeros_tarjeta

    @property
    def vencimiento_tarjeta_mes(self):
        """Gets the vencimiento_tarjeta_mes of this DatosDePagoTarjeta.  # noqa: E501

        el mes del vencimiento de la tarjeta de crédito  # noqa: E501

        :return: The vencimiento_tarjeta_mes of this DatosDePagoTarjeta.  # noqa: E501
        :rtype: float
        """
        return self._vencimiento_tarjeta_mes

    @vencimiento_tarjeta_mes.setter
    def vencimiento_tarjeta_mes(self, vencimiento_tarjeta_mes):
        """Sets the vencimiento_tarjeta_mes of this DatosDePagoTarjeta.

        el mes del vencimiento de la tarjeta de crédito  # noqa: E501

        :param vencimiento_tarjeta_mes: The vencimiento_tarjeta_mes of this DatosDePagoTarjeta.  # noqa: E501
        :type: float
        """
        if vencimiento_tarjeta_mes is None:
            raise ValueError("Invalid value for `vencimiento_tarjeta_mes`, must not be `None`")  # noqa: E501

        self._vencimiento_tarjeta_mes = vencimiento_tarjeta_mes

    @property
    def vencimiento_tarjeta_anio(self):
        """Gets the vencimiento_tarjeta_anio of this DatosDePagoTarjeta.  # noqa: E501

        el año de vencimiento de la tarjeta expresado en dos dígitos  # noqa: E501

        :return: The vencimiento_tarjeta_anio of this DatosDePagoTarjeta.  # noqa: E501
        :rtype: float
        """
        return self._vencimiento_tarjeta_anio

    @vencimiento_tarjeta_anio.setter
    def vencimiento_tarjeta_anio(self, vencimiento_tarjeta_anio):
        """Sets the vencimiento_tarjeta_anio of this DatosDePagoTarjeta.

        el año de vencimiento de la tarjeta expresado en dos dígitos  # noqa: E501

        :param vencimiento_tarjeta_anio: The vencimiento_tarjeta_anio of this DatosDePagoTarjeta.  # noqa: E501
        :type: float
        """
        if vencimiento_tarjeta_anio is None:
            raise ValueError("Invalid value for `vencimiento_tarjeta_anio`, must not be `None`")  # noqa: E501

        self._vencimiento_tarjeta_anio = vencimiento_tarjeta_anio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatosDePagoTarjeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatosDePagoTarjeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
