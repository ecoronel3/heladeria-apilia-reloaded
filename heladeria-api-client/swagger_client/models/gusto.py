# coding: utf-8

"""
    Heladería Via Apilia

    API de la Heladería Via Apilia. A través de esta API se pueden consultar los gustos de helado y realizar pedidos.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devs@heladeria-apilia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Gusto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'nombre': 'str',
        'tipo': 'TipoDeGusto'
    }

    attribute_map = {
        'id': 'id',
        'nombre': 'nombre',
        'tipo': 'tipo'
    }

    def __init__(self, id=None, nombre=None, tipo=None):  # noqa: E501
        """Gusto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._nombre = None
        self._tipo = None
        self.discriminator = None
        self.id = id
        self.nombre = nombre
        self.tipo = tipo

    @property
    def id(self):
        """Gets the id of this Gusto.  # noqa: E501

        nombre corto que identifica este gusto  # noqa: E501

        :return: The id of this Gusto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Gusto.

        nombre corto que identifica este gusto  # noqa: E501

        :param id: The id of this Gusto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def nombre(self):
        """Gets the nombre of this Gusto.  # noqa: E501

        nombre legible por humanos para este gusto  # noqa: E501

        :return: The nombre of this Gusto.  # noqa: E501
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre):
        """Sets the nombre of this Gusto.

        nombre legible por humanos para este gusto  # noqa: E501

        :param nombre: The nombre of this Gusto.  # noqa: E501
        :type: str
        """
        if nombre is None:
            raise ValueError("Invalid value for `nombre`, must not be `None`")  # noqa: E501

        self._nombre = nombre

    @property
    def tipo(self):
        """Gets the tipo of this Gusto.  # noqa: E501


        :return: The tipo of this Gusto.  # noqa: E501
        :rtype: TipoDeGusto
        """
        return self._tipo

    @tipo.setter
    def tipo(self, tipo):
        """Sets the tipo of this Gusto.


        :param tipo: The tipo of this Gusto.  # noqa: E501
        :type: TipoDeGusto
        """
        if tipo is None:
            raise ValueError("Invalid value for `tipo`, must not be `None`")  # noqa: E501

        self._tipo = tipo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Gusto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Gusto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
