# coding: utf-8

"""
    Heladería Via Apilia

    API de la Heladería Via Apilia. A través de esta API se pueden consultar los gustos de helado y realizar pedidos.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devs@heladeria-apilia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatosDePago(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tipo_de_pago': 'str'
    }

    attribute_map = {
        'tipo_de_pago': 'tipoDePago'
    }

    discriminator_value_class_map = {
          'DatosDePagoBilleteraVirtual': 'DatosDePagoBilleteraVirtual',
'DatosDePagoTarjeta': 'DatosDePagoTarjeta'    }

    def __init__(self, tipo_de_pago=None):  # noqa: E501
        """DatosDePago - a model defined in Swagger"""  # noqa: E501
        self._tipo_de_pago = None
        self.discriminator = 'tipoDePago'
        self.tipo_de_pago = tipo_de_pago

    @property
    def tipo_de_pago(self):
        """Gets the tipo_de_pago of this DatosDePago.  # noqa: E501

        se usa para determinar el tipo de pago a usar  # noqa: E501

        :return: The tipo_de_pago of this DatosDePago.  # noqa: E501
        :rtype: str
        """
        return self._tipo_de_pago

    @tipo_de_pago.setter
    def tipo_de_pago(self, tipo_de_pago):
        """Sets the tipo_de_pago of this DatosDePago.

        se usa para determinar el tipo de pago a usar  # noqa: E501

        :param tipo_de_pago: The tipo_de_pago of this DatosDePago.  # noqa: E501
        :type: str
        """
        if tipo_de_pago is None:
            raise ValueError("Invalid value for `tipo_de_pago`, must not be `None`")  # noqa: E501

        self._tipo_de_pago = tipo_de_pago

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatosDePago, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatosDePago):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
