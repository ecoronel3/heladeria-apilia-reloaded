# coding: utf-8

"""
    Heladería Via Apilia

    API de la Heladería Via Apilia. A través de esta API se pueden consultar los gustos de helado y realizar pedidos.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devs@heladeria-apilia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'peso': 'PesoDePote',
        'gustos': 'list[PoteGustos]',
        'links': 'PoteLinks1'
    }

    attribute_map = {
        'id': 'id',
        'peso': 'peso',
        'gustos': 'gustos',
        'links': '_links'
    }

    def __init__(self, id=None, peso=None, gustos=None, links=None):  # noqa: E501
        """Pote - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._peso = None
        self._gustos = None
        self._links = None
        self.discriminator = None
        self.id = id
        self.peso = peso
        self.gustos = gustos
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this Pote.  # noqa: E501

        identificador de este pote dentro del pedido  # noqa: E501

        :return: The id of this Pote.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pote.

        identificador de este pote dentro del pedido  # noqa: E501

        :param id: The id of this Pote.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def peso(self):
        """Gets the peso of this Pote.  # noqa: E501


        :return: The peso of this Pote.  # noqa: E501
        :rtype: PesoDePote
        """
        return self._peso

    @peso.setter
    def peso(self, peso):
        """Sets the peso of this Pote.


        :param peso: The peso of this Pote.  # noqa: E501
        :type: PesoDePote
        """
        if peso is None:
            raise ValueError("Invalid value for `peso`, must not be `None`")  # noqa: E501

        self._peso = peso

    @property
    def gustos(self):
        """Gets the gustos of this Pote.  # noqa: E501

        los gustos de helado en este pote  # noqa: E501

        :return: The gustos of this Pote.  # noqa: E501
        :rtype: list[PoteGustos]
        """
        return self._gustos

    @gustos.setter
    def gustos(self, gustos):
        """Sets the gustos of this Pote.

        los gustos de helado en este pote  # noqa: E501

        :param gustos: The gustos of this Pote.  # noqa: E501
        :type: list[PoteGustos]
        """
        if gustos is None:
            raise ValueError("Invalid value for `gustos`, must not be `None`")  # noqa: E501

        self._gustos = gustos

    @property
    def links(self):
        """Gets the links of this Pote.  # noqa: E501


        :return: The links of this Pote.  # noqa: E501
        :rtype: PoteLinks1
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Pote.


        :param links: The links of this Pote.  # noqa: E501
        :type: PoteLinks1
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
