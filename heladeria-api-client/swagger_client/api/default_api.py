# coding: utf-8

"""
    Heladería Via Apilia

    API de la Heladería Via Apilia. A través de esta API se pueden consultar los gustos de helado y realizar pedidos.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devs@heladeria-apilia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def gustos_get(self, **kwargs):  # noqa: E501
        """gustos_get  # noqa: E501

        Listar los gustos de helado  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gustos_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TipoDeGusto tipo:
        :return: list[Gusto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gustos_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gustos_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def gustos_get_with_http_info(self, **kwargs):  # noqa: E501
        """gustos_get  # noqa: E501

        Listar los gustos de helado  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gustos_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TipoDeGusto tipo:
        :return: list[Gusto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tipo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gustos_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tipo' in params:
            query_params.append(('tipo', params['tipo']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gustos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Gusto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pedidos_pedido_id_get(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_get  # noqa: E501

        Ver un pedido particular  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_get(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :return: Pedido
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pedidos_pedido_id_get_with_http_info(pedido_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pedidos_pedido_id_get_with_http_info(pedido_id, **kwargs)  # noqa: E501
            return data

    def pedidos_pedido_id_get_with_http_info(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_get  # noqa: E501

        Ver un pedido particular  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_get_with_http_info(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :return: Pedido
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pedido_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pedidos_pedido_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pedido_id' is set
        if ('pedido_id' not in params or
                params['pedido_id'] is None):
            raise ValueError("Missing the required parameter `pedido_id` when calling `pedidos_pedido_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pedido_id' in params:
            path_params['pedidoId'] = params['pedido_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pedidos/{pedidoId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pedido',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pedidos_pedido_id_pagar_post(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_pagar_post  # noqa: E501

        Inicia el pago del pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_pagar_post(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :param DatosDePago body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pedidos_pedido_id_pagar_post_with_http_info(pedido_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pedidos_pedido_id_pagar_post_with_http_info(pedido_id, **kwargs)  # noqa: E501
            return data

    def pedidos_pedido_id_pagar_post_with_http_info(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_pagar_post  # noqa: E501

        Inicia el pago del pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_pagar_post_with_http_info(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :param DatosDePago body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pedido_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pedidos_pedido_id_pagar_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pedido_id' is set
        if ('pedido_id' not in params or
                params['pedido_id'] is None):
            raise ValueError("Missing the required parameter `pedido_id` when calling `pedidos_pedido_id_pagar_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pedido_id' in params:
            path_params['pedidoId'] = params['pedido_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pedidos/{pedidoId}/pagar', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pedidos_pedido_id_pago_get(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_pago_get  # noqa: E501

        Ver el estado del pago de un pedido particular  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_pago_get(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :return: Pago
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pedidos_pedido_id_pago_get_with_http_info(pedido_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pedidos_pedido_id_pago_get_with_http_info(pedido_id, **kwargs)  # noqa: E501
            return data

    def pedidos_pedido_id_pago_get_with_http_info(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_pago_get  # noqa: E501

        Ver el estado del pago de un pedido particular  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_pago_get_with_http_info(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :return: Pago
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pedido_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pedidos_pedido_id_pago_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pedido_id' is set
        if ('pedido_id' not in params or
                params['pedido_id'] is None):
            raise ValueError("Missing the required parameter `pedido_id` when calling `pedidos_pedido_id_pago_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pedido_id' in params:
            path_params['pedidoId'] = params['pedido_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pedidos/{pedidoId}/pago', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pago',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pedidos_pedido_id_potes_get(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_potes_get  # noqa: E501

        Lista los potes que componen un pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_potes_get(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :return: list[Pote]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pedidos_pedido_id_potes_get_with_http_info(pedido_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pedidos_pedido_id_potes_get_with_http_info(pedido_id, **kwargs)  # noqa: E501
            return data

    def pedidos_pedido_id_potes_get_with_http_info(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_potes_get  # noqa: E501

        Lista los potes que componen un pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_potes_get_with_http_info(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :return: list[Pote]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pedido_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pedidos_pedido_id_potes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pedido_id' is set
        if ('pedido_id' not in params or
                params['pedido_id'] is None):
            raise ValueError("Missing the required parameter `pedido_id` when calling `pedidos_pedido_id_potes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pedido_id' in params:
            path_params['pedidoId'] = params['pedido_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pedidos/{pedidoId}/potes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Pote]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pedidos_pedido_id_potes_post(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_potes_post  # noqa: E501

        Agrega un pote a un pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_potes_post(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :param PedidoIdPotesBody body:
        :return: Pote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pedidos_pedido_id_potes_post_with_http_info(pedido_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pedidos_pedido_id_potes_post_with_http_info(pedido_id, **kwargs)  # noqa: E501
            return data

    def pedidos_pedido_id_potes_post_with_http_info(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_potes_post  # noqa: E501

        Agrega un pote a un pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_potes_post_with_http_info(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :param PedidoIdPotesBody body:
        :return: Pote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pedido_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pedidos_pedido_id_potes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pedido_id' is set
        if ('pedido_id' not in params or
                params['pedido_id'] is None):
            raise ValueError("Missing the required parameter `pedido_id` when calling `pedidos_pedido_id_potes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pedido_id' in params:
            path_params['pedidoId'] = params['pedido_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pedidos/{pedidoId}/potes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pedidos_pedido_id_potes_pote_id_delete(self, pedido_id, pote_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_potes_pote_id_delete  # noqa: E501

        quitar un pote de un pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_potes_pote_id_delete(pedido_id, pote_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :param int pote_id: id del pote (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pedidos_pedido_id_potes_pote_id_delete_with_http_info(pedido_id, pote_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pedidos_pedido_id_potes_pote_id_delete_with_http_info(pedido_id, pote_id, **kwargs)  # noqa: E501
            return data

    def pedidos_pedido_id_potes_pote_id_delete_with_http_info(self, pedido_id, pote_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_potes_pote_id_delete  # noqa: E501

        quitar un pote de un pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_potes_pote_id_delete_with_http_info(pedido_id, pote_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :param int pote_id: id del pote (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pedido_id', 'pote_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pedidos_pedido_id_potes_pote_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pedido_id' is set
        if ('pedido_id' not in params or
                params['pedido_id'] is None):
            raise ValueError("Missing the required parameter `pedido_id` when calling `pedidos_pedido_id_potes_pote_id_delete`")  # noqa: E501
        # verify the required parameter 'pote_id' is set
        if ('pote_id' not in params or
                params['pote_id'] is None):
            raise ValueError("Missing the required parameter `pote_id` when calling `pedidos_pedido_id_potes_pote_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pedido_id' in params:
            path_params['pedidoId'] = params['pedido_id']  # noqa: E501
        if 'pote_id' in params:
            path_params['poteId'] = params['pote_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pedidos/{pedidoId}/potes/{poteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pedidos_pedido_id_put(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_put  # noqa: E501

        Cambiar los datos de un pedido particular  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_put(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :param PedidosPedidoIdBody body:
        :return: Pedido
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pedidos_pedido_id_put_with_http_info(pedido_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pedidos_pedido_id_put_with_http_info(pedido_id, **kwargs)  # noqa: E501
            return data

    def pedidos_pedido_id_put_with_http_info(self, pedido_id, **kwargs):  # noqa: E501
        """pedidos_pedido_id_put  # noqa: E501

        Cambiar los datos de un pedido particular  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_pedido_id_put_with_http_info(pedido_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pedido_id: id del pedido (required)
        :param PedidosPedidoIdBody body:
        :return: Pedido
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pedido_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pedidos_pedido_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pedido_id' is set
        if ('pedido_id' not in params or
                params['pedido_id'] is None):
            raise ValueError("Missing the required parameter `pedido_id` when calling `pedidos_pedido_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pedido_id' in params:
            path_params['pedidoId'] = params['pedido_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pedidos/{pedidoId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pedido',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pedidos_post(self, **kwargs):  # noqa: E501
        """pedidos_post  # noqa: E501

        Crear un nuevo pedido a la dirección indicada  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PedidosBody body:
        :return: Pedido
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pedidos_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pedidos_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def pedidos_post_with_http_info(self, **kwargs):  # noqa: E501
        """pedidos_post  # noqa: E501

        Crear un nuevo pedido a la dirección indicada  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pedidos_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PedidosBody body:
        :return: Pedido
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pedidos_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pedidos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pedido',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
